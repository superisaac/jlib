// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jsonzgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// JSONZClient is the client API for JSONZ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JSONZClient interface {
	// bi-direction streams
	OpenStream(ctx context.Context, opts ...grpc.CallOption) (JSONZ_OpenStreamClient, error)
}

type jSONZClient struct {
	cc grpc.ClientConnInterface
}

func NewJSONZClient(cc grpc.ClientConnInterface) JSONZClient {
	return &jSONZClient{cc}
}

func (c *jSONZClient) OpenStream(ctx context.Context, opts ...grpc.CallOption) (JSONZ_OpenStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JSONZ_serviceDesc.Streams[0], "/JSONZ/OpenStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &jSONZOpenStreamClient{stream}
	return x, nil
}

type JSONZ_OpenStreamClient interface {
	Send(*JSONRPCMessage) error
	Recv() (*JSONRPCMessage, error)
	grpc.ClientStream
}

type jSONZOpenStreamClient struct {
	grpc.ClientStream
}

func (x *jSONZOpenStreamClient) Send(m *JSONRPCMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jSONZOpenStreamClient) Recv() (*JSONRPCMessage, error) {
	m := new(JSONRPCMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JSONZServer is the server API for JSONZ service.
// All implementations must embed UnimplementedJSONZServer
// for forward compatibility
type JSONZServer interface {
	// bi-direction streams
	OpenStream(JSONZ_OpenStreamServer) error
	mustEmbedUnimplementedJSONZServer()
}

// UnimplementedJSONZServer must be embedded to have forward compatible implementations.
type UnimplementedJSONZServer struct {
}

func (UnimplementedJSONZServer) OpenStream(JSONZ_OpenStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenStream not implemented")
}
func (UnimplementedJSONZServer) mustEmbedUnimplementedJSONZServer() {}

// UnsafeJSONZServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JSONZServer will
// result in compilation errors.
type UnsafeJSONZServer interface {
	mustEmbedUnimplementedJSONZServer()
}

func RegisterJSONZServer(s *grpc.Server, srv JSONZServer) {
	s.RegisterService(&_JSONZ_serviceDesc, srv)
}

func _JSONZ_OpenStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JSONZServer).OpenStream(&jSONZOpenStreamServer{stream})
}

type JSONZ_OpenStreamServer interface {
	Send(*JSONRPCMessage) error
	Recv() (*JSONRPCMessage, error)
	grpc.ServerStream
}

type jSONZOpenStreamServer struct {
	grpc.ServerStream
}

func (x *jSONZOpenStreamServer) Send(m *JSONRPCMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jSONZOpenStreamServer) Recv() (*JSONRPCMessage, error) {
	m := new(JSONRPCMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _JSONZ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "JSONZ",
	HandlerType: (*JSONZServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenStream",
			Handler:       _JSONZ_OpenStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "jsonz.proto",
}
